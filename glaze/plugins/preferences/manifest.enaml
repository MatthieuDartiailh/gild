# --------------------------------------------------------------------------------------
# Copyright 2020 by Glaze Authors, see git history for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# --------------------------------------------------------------------------------------
"""Manifest of the preferences plugin.

"""
import os
import sys
from typing import Any, Mapping, TYPE_CHECKING

import toml
from enaml.core.api import Conditional
from enaml.layout.api import hbox, vbox, spacer
from enaml.workbench.api import Extension, ExtensionPoint, PluginManifest, Workbench
from enaml.workbench.core.api import Command
from enaml.workbench.core.execution_event import ExecutionEvent
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.widgets.api import (FileDialogEx, Dialog, Field, Container,
                               PushButton)

from ..states import State
from ..lifecycle import AppStartup

PLUGIN_ID = "glaze.preferences"

MODULE_PATH = os.path.dirname(__file__)

# ======================================================================================
# --- Factories ------------------------------------------------------------------------
# ======================================================================================

if TYPE_CHECKING:
    from .plugin import PrefPlugin

def preference_plugin_factory() -> "PrefPlugin":
    """Factory function for the PrefPlugin

    """
    from .plugin import PrefPlugin
    return PrefPlugin()

# ======================================================================================
# --- Startup handler ------------------------------------------------------------------
# ======================================================================================

TOOLTIP = \
"""Folder used by the application to store informations such as preferences
log files, ..."""


enamldef AppDirSelectionDialog(Dialog): dial:
    """Simple dialog prompting the user to choose a directory for the app."""

    #: Application name
    attr app_name: str

    #: Currently seleted path
    attr path: str

    #: Default path located in the user directory.
    attr user_path: str = path

    title << f"Choose the directory in which to store {app_name} settings"

    Container:
        constraints = [vbox(fd, hbox(rs, ch, spacer), hbox(spacer, qu, ok)),
                       ch.right + 1.1 * ch.width <= qu.left]

        Field: fd:
            text := path
            tool_tip = TOOLTIP

        PushButton: rs:
            text = "Restore default"
            clicked:: dial.path = user_path

        PushButton: ch:
            text = "Choose directory"
            clicked ::
                d = FileDialogEx.get_existing_directory(current_path=path)
                if d:
                    dial.path = d
        PushButton: ok:
            text = "Ok"
            clicked :: dial.accept()

        PushButton: qu:
            text << f"Quit {app_name}"
            clicked :: dial.reject()


def check_app_folder(workbench: Workbench, cmd_args: Mapping[str, str]) -> None:
    """Check whether or not the app folder is defined

    If not prompt the user to choose.

    """
    manifest = workbench.get_manifest(PLUGIN_ID)
    app_loc = os.path.join(os.path.expanduser("~"), "." + manifest.application_name)
    if (getattr(cmd_args, "reset_app_folder", None) or
        not os.path.isfile(app_loc) or
        "app_path" not in toml.load(app_loc)
    ):

        # Explicit casting to detect encoding issues.
        dial = AppDirSelectionDialog(
            path=os.path.join(os.path.expanduser("~"), manifest.application_name)
        )
        if not dial.exec_():
            sys.exit(1)
        with open(app_loc, "w", encoding="utf-8") as f:
            toml.dump({"app_path": dial.path}, f)

    app_path = toml.load(app_loc)["app_path"]
    if not os.path.isdir(app_path):
        try:
            os.makedirs(app_path)
        except Exception:
            raise SystemExit("Cannot create application directory : %s" % app_path)

# ======================================================================================
# --- Command handlers -----------------------------------------------------------------
# ======================================================================================

def save_preferences(event: ExecutionEvent) -> None:
    """Handler for the "glaze.preferences.save" command.

    """
    pref = event.workbench.get_plugin(PLUGIN_ID)
    if "ask_user" in event.parameters:
        factory = FileDialogEx.get_save_file_name
        path = factory(name_filters=["*.ini"],
                       current_path=pref.last_directory)
        if path:
            pref.last_directory = os.path.dirname(path)
            pref.save_preferences(path=path)
    elif "path" in event.parameters:
        pref.save_preferences(path=event.parameters["path"])
    else:
        pref.save_preferences()


def load_preferences(event: ExecutionEvent) -> None:
    """Handler for the "glaze.preferences.load" command.

    """
    pref = event.workbench.get_plugin(PLUGIN_ID)
    if "ask_user" in event.parameters:
        ini_path = event.parameters.get("path", pref.last_directory)
        factory = FileDialogEx.get_open_file_name
        path = factory(current_path=ini_path, name_filters=["*.ini"])
        if path:
            pref.last_directory = os.path.dirname(path)
            pref.load_preferences(path=path)
    elif "path" in event.parameters:
        pref.load_preferences(path=event.parameters["path"])
    else:
        pref.load_preferences()


def plugin_init_complete(event: ExecutionEvent) -> None:
    """Handler for the "plugin_init_complete" command."""
    pref = event.workbench.get_plugin(PLUGIN_ID)
    pref.plugin_init_complete(event.parameters["plugin_id"])


def get_plugin_preferences(event: ExecutionEvent) -> Mapping[str, Any]:
    """Handler for the "glaze.preferences.get" command

    """
    pref = event.workbench.get_plugin(PLUGIN_ID)
    return pref.get_plugin_preferences(event.parameters["plugin_id"])

# TODO implement pref editor

# ======================================================================================
# --- Descriptions ---------------------------------------------------------------------
# ======================================================================================

PREF_PLUGINS_DESCRIPTION = \
"""Plugins which uses the built in preferences system should provide an
extension to this point in the form of a Preferences object so that they are
hooked up in the automatic saving of preferences."""

SAVE_PREFERENCES_DESCRIPTION = \
"""This command will save the current preferences.

In the absence of parameters the preferences are saved under
"prefs/default.ini" in the app folder.

Parameters
----------
ask_user : bool, optional
    If true the user will be prompted to choose the path to which the
    preferences should be saved.
path : unicode, optional
    Path to which save the preferences or starting point of the dialog
    depending on the value of ask_user.

"""

LOAD_PREFERENCES_DESCRIPTION = \
"""This command will load preferences.

In the absence of parameters the preferences are loaded from
"prefs/default.ini" in the app folder.

Parameters
----------
ask_user : bool, optional
    If true the user will be prompted to choose the path from which the
    preferences should be loaded.
path : unicode, optional
    Path from which to load the preferences or starting point of the dialog
    depending on the value of ask_user.

"""

PLUGIN_INIT_COMPLETE_DESCRIPTION = \
""" Notify the preference plugin that a contributing plugin has completed its
initialisation, ie auto saved members can now be connected. """

GET_PLUGIN_PREF_DESCRIPTION = \
"""Return the preferences stored for a given plugin

Preferences are returned as a dict composed only of strings.

Parameters
----------
plugin_id : unicode
    Id of the plugin whose preferences should be returned.

"""

OPEN_EDITOR_DESCRIPTION = \
"""Open the preference editor dialog. """

# ======================================================================================
# --- Manifest -------------------------------------------------------------------------
# ======================================================================================

enamldef PreferencesManifest(PluginManifest):
    """Manifest for the PreferencePlugin.

    """
    id = PLUGIN_ID
    factory = preference_plugin_factory

    #: Name of the application.
    #: Used for storing the location of the application folder and customizing dialogs.
    attr application_name: str

    #: Should a menu action be added to show error reports
    attr should_add_menu: bool = True

    #: Path for the menu action
    attr menu_root: str = "/prefs"

    # ==================================================================================
    # --- Extension points -------------------------------------------------------------
    # ==================================================================================

    ExtensionPoint:
        id = "plugin"
        description = PREF_PLUGINS_DESCRIPTION

    # ==================================================================================
    # --- Extensions -------------------------------------------------------------------
    # ==================================================================================

    Extension:
        id = "state"
        point = "glaze.states.state"
        State:
            id = "glaze.directory"
            sync_members = ["app_directory"]

    Extension:
        id = "startup"
        point = "glaze.lifecycle.startup"
        AppStartup:
            id = "glaze.directory"
            priority = 0
            run => (workbench, cmd_args):
                check_app_folder(workbench, cmd_args)

    Extension:
        id = "commands"
        point = "enaml.workbench.core.commands"
        Command:
            id = "glaze.preferences.save"
            description = SAVE_PREF_DESCRIPTION
            handler = save_preferences
        Command:
            id = "glaze.preferences.load"
            description = LOAD_PREF_DESCRIPTION
            handler = load_preferences
        Command:
            id = "glaze.preferences.plugin_init_complete"
            description = PLUGIN_INIT_COMPLETE_DESCRIPTION
            handler = plugin_init_complete
        Command:
            id = "glaze.preferences.get"
            description = GET_PLUGIN_PREF_DESCRIPTION
            handler = get_plugin_preferences
#        Command:
#            id = "exopy.preferences.open_editor"
#            description = OPEN_EDITOR_DESCRIPTION
#            handler = open_editor

    Conditional:
        condition = should_add_menu
        Extension:
            id = "menus"
            point = "enaml.workbench.ui.actions"
            MenuItem:
                path = menu_root
                label = "Preferences"
                after = "file"
                ItemGroup:
                    id = "pref"
            ActionItem:
                path = menu_root + "/save"
                label = "Save"
                group = "pref"
                command = "glaze.preferences.save"
                parameters = {"ask_user": True}
            ActionItem:
                path = menu_root + "/load"
                label = "Load"
                group = "pref"
                command = "glaze.preferences.load"
                parameters = {"ask_user": True}
            ActionItem:
                path = menu_root + "/save_default"
                label = "Save default"
                group = "pref"
                command = "exopy.preferences.save"
            ActionItem:
                path = menu_root + "/load_default"
                label = "Load default"
                group = "pref"
                command = "exopy.preferences.load"
    #        ActionItem:
    #            path = "/prefs/edit"
    #            label = "Edit"
    #            command = "hqc_meas.preferences.open_editor"
