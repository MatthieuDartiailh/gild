# -----------------------------------------------------------------------------
# Copyright 2022 by Glaze Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Template widget allowing to edit a list member from an Atom object.

The list should be composed of Atom object itself, and should be paired with
a Signal used to notify listeners about internal changes of the list. It is the
responsability of the model to signal internal changes to the list.

"""
from functools import partial
from atom.api import Str, List
from enaml.core.api import Looper, Conditional
from enaml.core.declarative import d_
from enaml.layout.api import hbox, align, spacer, grid, vbox
from enaml.widgets.api import (PushButton, Menu, Action, Container, ScrollArea,
                               GroupBox, Form)

from ..container_change import ContainerChange

enamldef PopupListMenu(Menu):
    """Popup menu used to alter add, delete or move elements in the list.

    """
    #: Reference to the list being edited.
    attr model

    #: Index of the element being edited.
    attr index : int

    #: Dict mapping operation to function to use to perform it.
    #: Possible entries are:
    #: - "add" : function to add an entry, receive index and "before"/"after"
    #: - "remove" : function to remove an entry, receive the index and new pos.
    #: - "move" : function move an element receive the index and the new index.
    attr operations : dict

    Action:
        visible = "add" in operations
        text = "Add before"
        triggered ::
            operations["add"](index, "before")
    Action:
        visible = "add" in operations
        text = "Add after"
        triggered ::
            operations["add"](index, "after")
    Action:
        separator = True

    Action:
        visible = "remove" in operations
        text = "Delete"
        triggered :: operations["remove"](index)
    Action:
        separator = True

    Action:
        visible = "move" in operations and index != 0
        text = "Move to top"
        triggered ::
            operations["move"](index, 0)
    Action:
        visible = "move" in operations and index != 0
        text = "Move up"
        triggered ::
            operations["move"](index, index - 1)
    Action:
        visible = "move" in operations and index != len(model)-1
        text = "Move down"
        triggered ::
            operations["move"](index, index + 1)
    Action:
        visible = "move" in operations and index != len(model)-1
        text = "Move to bottom"
        triggered ::
            operations["move"](index, len(model))

class ListContainer(Container):
    """Custom container handling the layout for the list editor.

    The user specifies which widget to use to edit the list and this container
    takes care of correctly laying out the PushButton used to edit the list
    content.

    """
    #: Aligmenent of the PushButton used to edit the list content.
    alignment = d_(Str("top"))

    def layout_constraints(self):
        """Layout the push buttons used to edit the list content.

        """
        children = self.widgets()
        lines = []; aligns = []

        while children:
            lines.append(hbox(*children[0:2]))
            aligns.append(align(self.alignment, children[0], children[1]))
            del children[0:2]

        constraints = [vbox(*lines)]
        constraints.extend(aligns)
        return  constraints


template ListEditor(Content):
    """ Edit an iterable stored in an Atom object using the provided content.

    The content should be an enaml widget with a model attribute which will
    receive one item of the iterable being edited.

    Attributes
    ----------
    model : Atom
        Reference to the object owning the list being edited.

    iterable_name : unicode
        Name of the member holding the list being edited. This should be set
        only once.

    signal_name : unicode
        Name of the signal signaling changes of the iterable. This should be
        set only once.

    operations : dict
        Dictionary mapping operation type ("add", "remove", "move") to callable
        performing the operation. Those callables are responsible for signaling
        that the list was modified. The functions signatures are described in
        `PopupListMenu`.

    alignment : {"top", "v_center", "bottom"}
        Alignment of the pushbutton used to edit each item of the list.

    """
    GroupBox: cont:
        attr model
        attr iterable_name
        attr signal_name
        attr operations : dict
        attr alignment = "top"

        attr _internal : list = getattr(model, iterable_name)[:]
        func _update_internal(change):
            """Update the list editor when the edited list change.

            This can handle either a member notification meaning a whole new
            list was assigned or a ContainerChange object. When only move
            operation occured we manually request a relayout so that the widget
            order reflects the new list order.

            """
            self._internal = getattr(model, iterable_name)[:]

        initialized ::
            model.observe(iterable_name, _update_internal)
            if signal_name:
                model.observe(signal_name, _update_internal)

        padding = 0
        Conditional:
            condition << (not bool(_internal) and bool(operations) and
                          "add" in operations)
            PushButton:
                text = "Add first element"
                clicked ::
                    operations["add"](0, "before")

        Conditional:
            condition << not bool(_internal)
            GroupBox:
                pass

        Conditional: cd_lp:
            condition << bool(_internal)
            ScrollArea:
                border = None
                ListContainer:
                    alignment << cont.alignment
                    alignment::
                        self.request_relayout()
                    padding = (2,0,2,0)
                    Looper: _lp:
                        iterable << _internal
                        PushButton:
                            constraints = [width == 15, height == 20]
                            font = "bold 12pt Consolas"
                            text = ">"
                            clicked ::
                                # We cannot rely on the loop_index as moved
                                # event alter the layout but not the item
                                # generation.
                                ind = _internal.index(loop_item)
                                menu = PopupListMenu(model=_internal,
                                                     index=ind,
                                                     operations=operations)
                                menu.popup()
                        Container:
                            # Using this container is necessary when using
                            # MappedView or similar as content as otherwise the
                            # widget order is screwed up.
                            padding = 0
                            Content: content:
                                model << loop_item
