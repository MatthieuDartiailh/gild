# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2022 Glaze Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Manifests used when testing plugin tools module content.

"""
from  atom.api import Typed, Str, Bool, Enum
from enaml.workbench.api import (PluginManifest, Plugin, Extension,
                                 ExtensionPoint)
from  enaml.core.api import Declarative, d_, d_func

from glaze.utils.declarator import Declarator
from glaze.utils.plugin_tools import ExtensionsCollector, DeclaratorCollector


POINT = 'test.contrib'

PLUGIN_ID = 'test'

# =============================================================================
# --- ExtensionCollector testing ----------------------------------------------
# =============================================================================

class Contribution(Declarative):
    """Dummy class representing a contribution to an extension point.

    """
    id = d_(Str())

    description = d_(Str())

    @d_func
    def new(self, workbench):
        raise NotImplementedError()

enamldef DContribution(Contribution):

    new => (self, workbench):
        pass


class TestDeclarator(Declarator):
    """Dummy Declarator simply taking note that it registered and unregistered.

    """
    fail_register = Bool()

    is_registered = Bool()

    unregistered = Bool()

    def register(self, plugin, traceback):
        if self.fail_register:
            traceback['test']= ''
        else:
            self.is_registered = True

    def unregister(self, plugin):
        self.unregistered = True

    def __str__(self):
        return 'Declarator'


def validate_contrib(contrib):

     return bool(contrib.description),\
         'Contribution does not have a description'


class ExtensionPlugin(Plugin):
    """Plugin delegating the handling of the contribution to its extension
    point.

    """
    contribs = Typed(ExtensionsCollector)

    def start(self):
        """Instantiate the ExtensionCollector.

        """
        self.contribs = ExtensionsCollector(workbench=self.workbench,
                                            point=POINT,
                                            ext_class=Contribution,
                                            validate_ext=validate_contrib)
        self.contribs.start()

    def stop(self):
        """Clean the ExtensionCollector.

        """
        self.contribs.stop()


enamldef ExtensionManifest(PluginManifest):
    """Manifest for the ExtensionPlugin.

    """
    id = 'test'
    factory = ExtensionPlugin

    ExtensionPoint:
        id = POINT


enamldef Contributor1(PluginManifest):
    """Contributor to ExtensionPlugin.

    """
    id = 'contrib1'

    Extension:
        id = 'contrib'
        point = 'test.contrib'
        Contribution:
            id = 'contrib1.contrib'
            description = 'Do something'


enamldef Contributor2(PluginManifest):
    """Contributor to ExtensionPlugin using a factory function.

    """
    id = u'contrib2'

    Extension:
        id = 'contrib'
        point = u'test.contrib'
        factory = lambda w: [Contribution(id='contrib2.contrib',
                                          description='While')]


enamldef Contributor3(PluginManifest):
    """Contributor to ExtensionPlugin forgetting to declare a task.

    """
    id = u'contrib3'

    Extension:
        id = 'contrib'
        point = u'test.contrib'
        Contribution:
            id = 'contrib3.contrib'


enamldef Contributor4(PluginManifest):
    """Contributor to ExtensionPlugin using a factory function but returning
    wrong type.

    """
    id = u'contrib4'

    Extension:
        id = 'contrib'
        point = u'test.contrib'
        factory = lambda w: [None]

# =============================================================================
# --- DeclaratorCollector testing ---------------------------------------------
# =============================================================================

class TestDeclarator(Declarator):
    """Dummy Declarator simply taking note that it registered and unregistered.

    """
    id = d_(Str())

    fail_register = d_(Bool())

    delay = d_(Enum(False, True, 'Always'))

    def register(self, collector, traceback):
        if self.fail_register:
            traceback[self.id]= 'Failed to register.'
        elif self.delay:
            collector._delayed.append(self)
            if self.delay != 'Always':
                self.delay = False
        else:
            collector.contributions[self.id] = self

    def unregister(self, collector):
        try:
           del collector.contributions[self.id]
        except KeyError:
            pass

    def __str__(self):
        return 'Declarator'


class DeclaratorPlugin(Plugin):
    """Plugin delegating the handling of the contribution to its extension
    point.

    """
    contribs = Typed(DeclaratorCollector)

    def start(self):
        """Instantiate the ExtensionCollector.

        """
        self.contribs = DeclaratorCollector(workbench=self.workbench,
                                             point=POINT,
                                             ext_class=[TestDeclarator])
        self.contribs.start()

    def stop(self):
        """Clean the ExtensionCollector.

        """
        self.contribs.stop()


enamldef DeclaratorManifest(PluginManifest):
    """Manifest for the DeclaratorPlugin.

    """
    id = 'test'
    factory = DeclaratorPlugin

    ExtensionPoint:
        id = POINT


enamldef DContributor1(PluginManifest):
    """Contributor to DeclaratorPlugin.

    """
    id = 'contrib1'

    Extension:
        id = 'contrib'
        point = 'test.contrib'
        TestDeclarator:
            id = 'contrib1'


enamldef DContributor2(PluginManifest):
    """Contributor to ExtensionPlugin using a factory function.

    """
    id = 'contrib2'

    Extension:
        id = 'contrib'
        point = 'test.contrib'
        factory = lambda w: [TestDeclarator(id='contrib2', delay=True)]



enamldef DContributor3(PluginManifest):
    """Contributor to ExtensionPlugin using a factory function but returning
    wrong type.

    """
    id = 'contrib3'

    Extension:
        id = 'contrib'
        point = 'test.contrib'
        factory = lambda w: [None]


enamldef DContributor4(PluginManifest):
    """Contributor to DeclaratorPlugin.

    """
    id = 'contrib4'

    Extension:
        id = 'contrib'
        point = 'test.contrib'
        TestDeclarator:
            id = 'test_registration'
            fail_register = True


enamldef DContributor5(PluginManifest):
    """Contributor to DeclaratorPlugin.

    """
    id = 'contrib4'

    Extension:
        id = 'contrib'
        point = 'test.contrib'
        TestDeclarator:
            delay = 'Always'
